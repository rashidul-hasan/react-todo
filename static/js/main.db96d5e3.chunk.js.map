{"version":3,"sources":["components/InputBox.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","className","onSubmit","e","preventDefault","inputBox","document","getElementById","todo","value","onAddTodo","type","placeholder","id","style","width","autofocus","TodoItem","i","useState","actionButtonsVisible","setActionButtonsVisibility","editing","setEditingState","editedTodo","setEditedTodo","onTodoStateChange","target","isChecked","checked","key","onMouseEnter","onMouseLeave","class","defaultChecked","done","onClick","for","text","defaultValue","onChange","onTodoEdited","onRemoveTodo","TodoList","todos","map","App","state","progress","item","setState","addTodo","push","uuid","reduced","filter","calculatePorgress","total","length","Math","ceil","this","role","aria-label","transitionName","transitionEnterTimeout","transitionLeaveTimeout","ProgressBar","now","label","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db96d5e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport const InputBox = (props) => {\r\n\r\n    const onSubmit = (e) => {\r\n    \te.preventDefault();\r\n\t      const inputBox = document.getElementById(\"input-todo\");\r\n\t      const todo = inputBox.value;\r\n\r\n\t      if (todo === \"\") {\r\n\t        return;\r\n\t      }\r\n\t      props.onAddTodo(todo);\r\n\t      inputBox.value = \"\";\r\n    }\r\n\r\n    return (\r\n        <form className=\"form-inline\" onSubmit={onSubmit}>\r\n\t        <input type=\"text\" className=\"form-control mb-2 mr-sm-2\"\r\n\t               placeholder=\"Add a todo...\" id=\"input-todo\" style={{width: '75%'}} autofocus />\r\n\t        <button type=\"submit\" className=\"btn btn-primary mb-2\" style={{width: '23%'}} >Add</button>\r\n\t      </form>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\n\r\n\r\nexport const TodoItem = (props) => {\r\n\r\n    const i = props.todo;\r\n\r\n    const [actionButtonsVisible, setActionButtonsVisibility] = useState(false);\r\n    const [editing, setEditingState] = useState(false);\r\n    const [editedTodo, setEditedTodo] = useState({});\r\n\r\n    const onTodoStateChange = (e) => {\r\n    \tconst id = e.target.value;\r\n      \tconst isChecked = e.target.checked;\r\n      \tprops.onTodoStateChange(id, isChecked);\r\n    }\r\n\r\n    const onMouseEnter = (e) => {\r\n        setActionButtonsVisibility(true);\r\n    }\r\n\r\n    const onMouseLeave = (e) => {\r\n        setActionButtonsVisibility(false);\r\n    }\r\n\r\n    const onEditTodo = () => {\r\n        props.onTodoEdited(editedTodo);\r\n        setEditingState(false);\r\n    }\r\n\r\n    const onRemoveTodo = (todo) => {\r\n        props.onRemoveTodo(todo);\r\n    }\r\n\r\n    const onEditButtonPress = () => {\r\n        setEditingState(true);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"list-group-item\" key={i.id} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\r\n            <div className=\"form-check\">\r\n            <div class=\"custom-control custom-checkbox\">\r\n                { !editing &&\r\n                    <>\r\n                        <input type=\"checkbox\" class=\"custom-control-input\" id={`todo-${i.id}`} defaultChecked={i.done}\r\n                        onClick={onTodoStateChange} value={i.id} />\r\n                        <label className={i.done ? \"custom-control-label todo-item strike-through\" : \"todo-item custom-control-label\"} \r\n                            for={`todo-${i.id}`}>{i.text}\r\n                        </label>\r\n                    </>\r\n                }\r\n                { editing &&\r\n                    <>\r\n                        <input type=\"text\" class=\"form-control\" \r\n                        onClick={onTodoStateChange} defaultValue={i.text} id={i.id} onChange={ e => setEditedTodo({id: e.target.id, text: e.target.value})}/>\r\n                        <button className=\"btn btn-link\" onClick={onEditTodo}>Save</button>\r\n                    </>\r\n                }\r\n                {(actionButtonsVisible && !editing) &&\r\n                    <>\r\n                        <button className=\"btn btn-link\" onClick={() => onEditButtonPress(i)}>Edit</button>\r\n                        <button className=\"btn btn-link text-danger\" onClick={() => onRemoveTodo(i)}>Remove</button>\r\n                    </>\r\n                }\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { TodoItem } from './TodoItem';\r\n\r\n\r\nexport const TodoList = (props) => {\r\n\r\n    return (\r\n        <ul className=\"list-group\">\r\n          {props.todos.map (i  => <TodoItem todo={i} \r\n                                    onTodoEdited={props.onTodoEdited}\r\n                                    onRemoveTodo={props.onRemoveTodo}\r\n                                    onTodoStateChange={props.onTodoStateChange} />)}\r\n      </ul>\r\n    )\r\n}\r\n","import React from 'react';\nimport './assets/css/bootstrap.min.css';\nimport \"./App.css\"\nimport uuid from \"uuid\";\nimport { CSSTransitionGroup } from 'react-transition-group'\nimport {InputBox} from \"./components/InputBox\";\nimport {TodoList} from \"./components/TodoList\";\nimport {ProgressBar} from \"react-bootstrap\";\n\nclass App extends React.Component{\n\n  state = {\n      todos: [],\n      progress: 0\n  }\n\n  onTodoStateChange = (id, isChecked) => {\n    \n    const {todos} = this.state;\n\n    todos.map(item => {\n        if (item.id == id) {\n            item.done = isChecked;\n        }\n        return item;\n    });\n\n    this.setState({todos});\n\n  }\n\n  addTodo = (todo) => {\n    const {todos} = this.state;\n\n    if (todo === \"\") {\n      return;\n    }\n\n    todos.push({id: uuid(), text: todo, done: false});\n    this.setState({todos});\n  }\n\n  onTodoEdited = (editedTodo) => {\n    const {todos} = this.state;\n\n    todos.map(item => {\n        if (item.id == editedTodo.id) {\n            item.text = editedTodo.text;\n        }\n        return item;\n    });\n\n    this.setState({todos});\n  }\n\n  onRemoveTodo = (todo) => {\n    const {todos} = this.state;\n\n    const reduced = todos.filter(item => {\n        return item.id != todo.id;\n    });\n\n    this.setState({todos: reduced});\n  }\n\n  calculatePorgress = (todos) => {\n      const total = todos.length;\n\n      if (total === 0) return 0;\n      let done = 0;\n      todos.map( i => {\n          if (i.done) done++;\n      });\n\n      return Math.ceil((done/total) * 100)\n  }\n  \n  render() {\n\n      const {todos} = this.state;\n      const progress = this.calculatePorgress(todos);\n\n      return (\n          <div className=\"App\">\n              <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n                  <h1 className=\"display-4\">React TODO <span role=\"img\" aria-label=\"sheep\">🤞</span></h1>\n              </div>\n\n              <div className=\"container\">\n                  \n                  <div className=\"d-flex justify-content-center flex-row\">\n                      <div className=\"todo-wrap\">\n\n                          <InputBox onAddTodo={this.addTodo} />\n\n                          <CSSTransitionGroup\n                            transitionName=\"animate\"\n                            transitionEnterTimeout={500}\n                            transitionLeaveTimeout={300}>\n                            { (progress > 0) &&\n                              <ProgressBar now={progress} label={`${progress}% Completed`} className=\"progress-container\" />\n                            }\n                          </CSSTransitionGroup>\n                          \n                          <TodoList todos={todos} \n                              onTodoEdited={this.onTodoEdited}\n                              onRemoveTodo={this.onRemoveTodo}\n                              onTodoStateChange={this.onTodoStateChange}/>\n                          \n                      </div>\n                  </div>\n\n              </div>\n              <div className=\"container\">\n                  <footer className=\"pt-4 my-md-5 pt-md-5 border-top\">\n                      <div className=\"row\">\n                        <p>Made with <span role=\"img\" aria-label=\"love\">❤️</span> by <a href=\"http://www.rashidul.xyz\">Rashidul Hasan</a></p>\n                      </div>\n                  </footer>\n              </div>\n          </div>\n      );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}